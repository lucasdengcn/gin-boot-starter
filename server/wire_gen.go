// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"gin-boot-starter/api/controller"
	"gin-boot-starter/infra/db"
	"gin-boot-starter/persistence/repository"
	"gin-boot-starter/service"
	"github.com/google/wire"
)

// Injectors from wire_injector.go:

// InitializeUserController injector
func InitializeUserController() *controller.UserController {
	sqlxDB := db.GetDBCon()
	userRepository := repository.NewUserRepository(sqlxDB)
	userService := service.NewUserService(userRepository)
	aclRepository := repository.NewAclRepository(sqlxDB)
	aclService := service.NewAclService(aclRepository)
	userController := controller.NewUserController(userService, aclService)
	return userController
}

func InitializeAccountController() *controller.AccountController {
	sqlxDB := db.GetDBCon()
	userRepository := repository.NewUserRepository(sqlxDB)
	userService := service.NewUserService(userRepository)
	aclRepository := repository.NewAclRepository(sqlxDB)
	aclService := service.NewAclService(aclRepository)
	accountController := controller.NewAccountController(userService, aclService)
	return accountController
}

func InitializeUserService() *service.UserService {
	sqlxDB := db.GetDBCon()
	userRepository := repository.NewUserRepository(sqlxDB)
	userService := service.NewUserService(userRepository)
	return userService
}

// InitializeAclService injector
func InitializeAclService() *service.AclService {
	sqlxDB := db.GetDBCon()
	aclRepository := repository.NewAclRepository(sqlxDB)
	aclService := service.NewAclService(aclRepository)
	return aclService
}

// wire_injector.go:

// ProviderSet
var dbSet = wire.NewSet(db.GetDBCon)

// ProviderSet
var aclServiceSet = wire.NewSet(repository.NewAclRepository, service.NewAclService)

// ProviderSet
var userServiceSet = wire.NewSet(repository.NewUserRepository, service.NewUserService)
